name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12, macos-13, macos-14]
        arch: [SSE4, NATIVE]
        python: ['3.8', '3.10']
        exclude:
          - os: macos-14
            python: '3.8'

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        architecture: ${{ matrix.os == 'macos-14' && 'ARM64' || 'x64' }}

    - name: Install dependencies (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt-get install -y libfftw3-bin libfftw3-dev libeigen3-dev

    - name: Install dependencies (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      run: brew install fftw eigen

    - name: Install numpy
      run: python3 -m pip install --upgrade pip numpy

    - name: Clone googletest
      run: |
        cd ${{github.workspace}}/libsakura/
        git clone https://github.com/google/googletest.git
        cd googletest && git checkout release-1.8.0 && cd ..
        ln -s googletest/googletest gtest

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cd ${{github.workspace}}/libsakura/
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_DOC=OFF -DSIMD_ARCH=${{ matrix.arch }} -DOSX_ARCHITECTURES=${{ matrix.os == 'macos-14' && 'arm64' || 'x86_64' }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/libsakura/build --config ${{env.BUILD_TYPE}}

    - name: Update rpath (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      working-directory: ${{github.workspace}}/libsakura/build/bintest
      run: |
        install_name_tool -change "@rpath/libtestutil.dylib" "libtestutil.dylib" testNumericOperation
        install_name_tool -change "@rpath/libtestutil.dylib" "libtestutil.dylib" testLsq
        install_name_tool -change "@rpath/libtestutil.dylib" "libtestutil.dylib" testStatistics
        install_name_tool -change "@rpath/libtestutil.dylib" "libtestutil.dylib" testBoolFilterCollection
        install_name_tool -change "@rpath/libtestutil.dylib" "libtestutil.dylib" testCreateMaskNearEdge

    - name: Test
      working-directory: ${{github.workspace}}/libsakura/build/bintest
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ./testInit
        ./testCInterface
        ./testNumericOperation --gtest_filter="*LMFit*:*SolveSimultaneous*:-*Big*"
        ./testStatistics --gtest_filter="*SortValidValuesDensely*"
        ./testCreateMaskNearEdge --gtest_filter="-*Performance*"
        ./testBoolFilterCollection --gtest_filter="-*Performance*"
        # ./testLsq

